//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Res/Scripts/PLAYER/MANAGMENT/INPUT_CONTROLLER.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @INPUT_CONTROLLER: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @INPUT_CONTROLLER()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""INPUT_CONTROLLER"",
    ""maps"": [
        {
            ""name"": ""PLAYER"",
            ""id"": ""fb290abd-c13f-4f63-9af2-75d5e8049e32"",
            ""actions"": [
                {
                    ""name"": ""LOOK"",
                    ""type"": ""PassThrough"",
                    ""id"": ""660db12f-cebe-4c47-bd18-e2ec6108ef2d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MOVE"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7491a98e-1e58-46b2-bb67-90d89e8439bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""85a12cb9-9aae-4563-bc4e-a8c25330538a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""LOOK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8573fa4-7146-431a-bed7-f13747b70659"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ANDROID"",
                    ""action"": ""LOOK"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""MOVE_PC"",
                    ""id"": ""47a88b2b-1e9a-4695-ba27-7317a411b41d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""24a1f835-fb3b-4d67-a18d-fece983534e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d7697043-48f8-43f7-a54d-925707fae4e1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1a4b0404-e7fc-45e4-a12d-e6f143148092"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0af27db1-22cf-40fa-a6c3-bd041037d10a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""dd359019-1c2a-4981-8c30-a6c7e0db130d"",
            ""actions"": [
                {
                    ""name"": ""POINT"",
                    ""type"": ""Button"",
                    ""id"": ""22db358e-7e00-4c75-a50c-51bc689533b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc62b880-f4a4-4ec8-8b01-ce0e6b5aec7d"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""POINT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""ANDROID"",
            ""bindingGroup"": ""ANDROID"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PLAYER
        m_PLAYER = asset.FindActionMap("PLAYER", throwIfNotFound: true);
        m_PLAYER_LOOK = m_PLAYER.FindAction("LOOK", throwIfNotFound: true);
        m_PLAYER_MOVE = m_PLAYER.FindAction("MOVE", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_POINT = m_UI.FindAction("POINT", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PLAYER
    private readonly InputActionMap m_PLAYER;
    private List<IPLAYERActions> m_PLAYERActionsCallbackInterfaces = new List<IPLAYERActions>();
    private readonly InputAction m_PLAYER_LOOK;
    private readonly InputAction m_PLAYER_MOVE;
    public struct PLAYERActions
    {
        private @INPUT_CONTROLLER m_Wrapper;
        public PLAYERActions(@INPUT_CONTROLLER wrapper) { m_Wrapper = wrapper; }
        public InputAction @LOOK => m_Wrapper.m_PLAYER_LOOK;
        public InputAction @MOVE => m_Wrapper.m_PLAYER_MOVE;
        public InputActionMap Get() { return m_Wrapper.m_PLAYER; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PLAYERActions set) { return set.Get(); }
        public void AddCallbacks(IPLAYERActions instance)
        {
            if (instance == null || m_Wrapper.m_PLAYERActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PLAYERActionsCallbackInterfaces.Add(instance);
            @LOOK.started += instance.OnLOOK;
            @LOOK.performed += instance.OnLOOK;
            @LOOK.canceled += instance.OnLOOK;
            @MOVE.started += instance.OnMOVE;
            @MOVE.performed += instance.OnMOVE;
            @MOVE.canceled += instance.OnMOVE;
        }

        private void UnregisterCallbacks(IPLAYERActions instance)
        {
            @LOOK.started -= instance.OnLOOK;
            @LOOK.performed -= instance.OnLOOK;
            @LOOK.canceled -= instance.OnLOOK;
            @MOVE.started -= instance.OnMOVE;
            @MOVE.performed -= instance.OnMOVE;
            @MOVE.canceled -= instance.OnMOVE;
        }

        public void RemoveCallbacks(IPLAYERActions instance)
        {
            if (m_Wrapper.m_PLAYERActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPLAYERActions instance)
        {
            foreach (var item in m_Wrapper.m_PLAYERActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PLAYERActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PLAYERActions @PLAYER => new PLAYERActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_POINT;
    public struct UIActions
    {
        private @INPUT_CONTROLLER m_Wrapper;
        public UIActions(@INPUT_CONTROLLER wrapper) { m_Wrapper = wrapper; }
        public InputAction @POINT => m_Wrapper.m_UI_POINT;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @POINT.started += instance.OnPOINT;
            @POINT.performed += instance.OnPOINT;
            @POINT.canceled += instance.OnPOINT;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @POINT.started -= instance.OnPOINT;
            @POINT.performed -= instance.OnPOINT;
            @POINT.canceled -= instance.OnPOINT;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_ANDROIDSchemeIndex = -1;
    public InputControlScheme ANDROIDScheme
    {
        get
        {
            if (m_ANDROIDSchemeIndex == -1) m_ANDROIDSchemeIndex = asset.FindControlSchemeIndex("ANDROID");
            return asset.controlSchemes[m_ANDROIDSchemeIndex];
        }
    }
    public interface IPLAYERActions
    {
        void OnLOOK(InputAction.CallbackContext context);
        void OnMOVE(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPOINT(InputAction.CallbackContext context);
    }
}
